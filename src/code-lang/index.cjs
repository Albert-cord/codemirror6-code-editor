'use strict';

var lr = require('@lezer/lr');
var highlight = require('@lezer/highlight');
var language = require('@codemirror/language');
var autocomplete = require('@codemirror/autocomplete');

const mvelHighlighting = highlight.styleTags({
  null: highlight.tags.null,
    instanceof: highlight.tags.operatorKeyword,
  this: highlight.tags.self,
  "new assert to with void": highlight.tags.keyword,
  "var def": highlight.tags.definitionKeyword,
  "module package import": highlight.tags.moduleKeyword,
  "switch while foreach if else case default do break continue return try catch finally throw": highlight.tags.controlKeyword,
  ["requires exports uses provides public private protected static transitive abstract final " +
   "strictfp synchronized native transient volatile throws"]: highlight.tags.modifier,
  IntegerLiteral: highlight.tags.integer,
  FloatingPointLiteral: highlight.tags.float,
  "StringLiteral TextBlock": highlight.tags.string,
  CharacterLiteral: highlight.tags.character,
  LineComment: highlight.tags.lineComment,
  BlockComment: highlight.tags.blockComment,
  BooleanLiteral: highlight.tags.bool,
  PrimitiveType: highlight.tags.standard(highlight.tags.typeName),
  TypeName: highlight.tags.typeName,
  IdentifierPrefix: highlight.tags.variableName,
  "MethodName/Identifier": highlight.tags.function(highlight.tags.variableName),
  Definition: highlight.tags.definition(highlight.tags.variableName),
  ArithOp: highlight.tags.arithmeticOperator,
  LogicOp: highlight.tags.logicOperator,
  BitOp: highlight.tags.bitwiseOperator,
  CompareOp: highlight.tags.compareOperator,
  AssignOp: highlight.tags.definitionOperator,
  UpdateOp: highlight.tags.updateOperator,
  Asterisk: highlight.tags.punctuation,
  Label: highlight.tags.labelName,
  "( )": highlight.tags.paren,
  "[ ]": highlight.tags.squareBracket,
  "@DEFINE_BEGIN @END": highlight.tags.brace,
  "{ }": highlight.tags.brace,
  ".": highlight.tags.derefOperator,
  ", ;": highlight.tags.separator,
  AssignValuer: highlight.tags.special(highlight.tags.float),
  "AssignValuer/IntegerLiteral": highlight.tags.special(highlight.tags.float),
  "AssignValuer/float": highlight.tags.special(highlight.tags.float),
  "AssignValuer/FloatingPointLiteral": highlight.tags.special(highlight.tags.float),
  "AssignValuer!": highlight.tags.special(highlight.tags.float),
  "AssignValuer/...": highlight.tags.special(highlight.tags.float),
  "（ ）": highlight.tags.special(highlight.tags.float),
});

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_identifier = {__proto__:null,"@DEFINE_BEGIN":12, def:20, true:54, false:54, null:62, this:64, new:70, void:74, byte:76, short:76, int:76, long:76, char:76, float:76, double:76, boolean:76, extends:96, super:98, instanceof:150, public:190, protected:192, private:194, abstract:196, static:198, final:200, strictfp:202, default:204, synchronized:206, native:208, transient:210, volatile:212, import:218, if:230, else:232, while:236, foreach:240, var:247, assert:254, switch:258, case:264, do:268, break:272, continue:276, return:280, "@END":282};
const parser$2 = lr.LRParser.deserialize({
  version: 14,
  states: "!+YQ$[QPOOO&fQQO'#FuO(pQQO'#CcOOQO'#Cc'#CcO(wQPO'#CoO)POSO'#CzOOQO'#GT'#GTO+UQPO'#C}OOQO'#DT'#DTO-`QQO'#G_O-gQQO'#G_OOQO'#G_'#G_O-nQPO'#G]OOQO'#G^'#G^O/aQPO'#CnOOQO'#G]'#G]OOQO'#DO'#DOO/hQQO'#GRO2xQQO'#DdO3PQPO'#DcO3UQPO'#DeOOQO'#GS'#GSO1UQQO'#GSO4[QQO'#EoO4cQPO'#ERO4jQPO'#DzO4oQPO'#EVO4oQPO'#EXOOQO'#GR'#GROOQO'#F}'#F}OOQO'#Fa'#FaO6PQPO'#FmO8XQPO'#CnOOQO'#Fx'#FxO8`QPO'#EpO8eQPO'#EzOOQO'#Fw'#FwOOQO'#F`'#F`Q]QPOOOOQO'#C`'#C`QOQPOOO8vQPO'#GXO9XQQO'#DeOOQO'#Go'#GoO9aQPO'#GoO9fQPO'#CeO9nQPO'#ElO9yQPO'#ErO9yQPO'#EuO9fQPO'#EzO:OQPO'#EwO4oQPO'#FOO9yQPO'#FQO]QPO'#FVO:TQPO'#FXO:`QPO'#FZO:kQPO'#F]O(wQPO'#CaO:rQPO'#F{OOQO'#Ch'#ChOOQO,59R,59ROOQO'#Fu'#FuO;cQQO,59ZOOQO'#GP'#GPOOOO'#Fb'#FbO<iOSO,59fOOQO,59f,59fO>tQQO'#FuOA_QQO'#CcOAuQQO,59iOB_QPO'#G]O.PQPO'#CnOBoQPO,5:vOBzQPO'#D}OCYQPO'#GhOCbQPO,5:gODkQPO,5:gODrQPO'#GkOD}QPO,5:lOOQO,59q,59qOD`QPO,59pOEhQPO'#DQOFQQPO'#CgOFbQPO'#DYOFgQPO'#DYOOQO'#Fc'#FcOGTQPO,59rOGhQPO'#GiOHPQPO'#EPOH_QPO'#GpOHgQPO,5;fOOQO'#G`'#G`OIQQPO,59vOOQO-E9_-E9_OI|QPO,59YOJrQPO,59jO4oQPO,59|OJyQPO,5:PO4oQPO,59`OKXQPO'#DaOOQO,59},59}OOQO'#Dn'#DnOOQO'#Dq'#DqO4oQPO,5:WO4oQPO,5:WO4oQPO,5:WO4oQPO,5:WO4oQPO,5:WO4oQPO,5:WO4oQPO,5:WO4oQPO,5:WO4oQPO,5:WO4oQPO,5:nOOQO,5:q,5:qOOQO,5;Z,5;ZOK`QPO,5:dOOQO,5:m,5:mOKqQPO,5:mOKxQPO,5:fOLPQPO'#G]OK`QPO'#D[OLZQQO,5:sOMnQPO,5<XOOQO-E9k-E9kO]QPO,5;[ONuQPO,5;fO9fQPO,5;fOOQO-E9^-E9^O! TQPO,5<sOBzQPO,5<sOJaQPO,59aOOQO,5=Z,5=ZO! `QPO,59PO! eQQO,5;WO(wQPO,5;WO4oQPO'#C}O]QPO,5;^O]QPO,5;aO! mQPO'#EyO]QPO,5;cO]QPO,5;hO! }QQO,5;jO!!XQPO,5;lO!!^QPO,5;qOOQO'#Eq'#EqOOQO,5;s,5;sO!!cQPO,5;sOOQO,5;u,5;uO!!hQPO,5;uO!!mQQO,5;wOOQO,5;w,5;wO!!tQPO,58{OOQO,5<g,5<gO!!{QPO,59SO(wQPO,59[O!#QQPO'#CsOOQO1G.x1G.xOOOO-E9`-E9`OOQO1G/Q1G/QOOQO1G/T1G/TO!#[QQO'#FuO!#cQQO'#CcOOQO,5:i,5:iO9fQPO,5:jOOQO,5:h,5:hO!#jQQO,5:hO!#oQPO,59vOK`QPO'#FjO!$ZQPO1G0bO4oQPO1G0bO!$cQPO,5:iOCgQPO'#FhO!$tQPO,5=SOOQO1G0R1G0RO!$|QPO'#D}O!%_QPO1G0RO!%dQPO'#CnO9fQPO'#FiO!%kQPO,5=VOOQO1G0W1G0WOOQO1G/[1G/[OD`QPO1G/[O!&UQPO'#D[O!&]QPO'#D]O!&kQPO'#G[O!&sQPO,59lOOQO,59t,59tO!&xQPO,59tOOQO-E9a-E9aO!&}QPO,5=TO!'fQPO,5:kO9fQPO'#FoO!'mQPO,5=[OOQO1G1Q1G1QOOQO1G/U1G/UO!'uQQO1G.{O3PQPO1G/iO(wQPO1G/iO8vQPO'#GXO!)lQQO1G.{OOQO1G.{1G.{O!)qQQO1G/hOOQO1G/k1G/kO!)xQPO1G/kO!*TQQO1G.zO!*kQQO'#GcO!*xQPO,59{O!,[QQO1G/rO!-vQQO1G/rO!-}QQO1G/rO!/fQQO1G/rO!/mQQO1G/rO!0rQQO1G/rO!2mQQO1G/rO!2tQQO1G/rO!2{QQO1G/rO!3VQQO1G0YO!3^QQO'#G]OOQO1G0O1G0OOOQO1G0X1G0XO!4wQQO1G0QOOQO1G0Q1G0QOOQO1G0v1G0vO!5_QPO1G1QO!5dQPO'#DgO!5kQPO'#DgOOQO'#Ff'#FfO!5sQQO1G/lOOQO1G2_1G2_O3PQPO1G2_O!7gQPO1G.kO!7oQPO1G0rOOQO1G0r1G0rO!7zQQO1G0rO!8SQPO1G0xOOQO1G0{1G0{O-nQPO,5;iO8eQPO,5;iO!;bQPO,5;eO!;iQPO,5;eOOQO1G0}1G0}OOQO1G1S1G1SOOQO1G1U1G1UO4oQPO1G1UO!>pQPO'#FSOOQO1G1W1G1WO9yQPO1G1]OOQO1G1_1G1_OOQO1G1a1G1aOOQO1G1c1G1cO!>wQPO1G.gOOQO1G.g1G.gOOQO1G.n1G.nOOQO1G.v1G.vO!?OQQO'#DdO!@fQQO'#GQO!@sQPO'#E]OOQO'#GQ'#GQO!@}QPO'#GQO!AiQPO'#GnO!AqQPO,59_OOQO1G0U1G0UO!AvQPO1G0SOOQO1G0S1G0SO!A{QQO1G0SOOQO,5<U,5<UOOQO-E9h-E9hO4oQPO7+%|OOQO7+%|7+%|OOQO1G0T1G0TO9fQPO1G0UOOQO,5<S,5<SOOQO-E9f-E9fOOQO7+%m7+%mOOQO,5<T,5<TOOQO-E9g-E9gOOQO7+$v7+$vO!BQQWO,59ZO!BXQPO,59wOOQO,59w,59wOK`QPO'#GbOESQPO'#FdO!BgQPO,5<vOOQO1G/W1G/WOOQO1G/`1G/`O!BoQQO'#GfOOQO'#Gf'#GfO!CPQPO'#DiOOQO1G0V1G0VOOQO,5<Z,5<ZOOQO-E9m-E9mOOQO7+%T7+%TOOQO'#Dd'#DdO3PQPO7+%TO3PQPO,5<sO!CZQPO7+$gOOQO7+%S7+%SOOQO7+%V7+%VO4oQPO'#FeO!CiQPO,5<}OOQO1G/g1G/gO4oQPO7+%tO!CtQQO,59rO!D}QQO,59vOOQO7+&l7+&lOOQO,5:R,5:RO!FWQQO,5:RO!F_QPO,5:ROOQO-E9d-E9dOOQO7+%W7+%WOOQO7+'y7+'yO!FfQPO'#ClO!F|QPO7+$VO!GRQPO7+$VO!GWQPO7+&^O!G]QPO7+&^OOQO7+&^7+&^O]QPO7+&dO!GhQPO1G1TONuQPO1G1TO!GvQQO1G1POKXQPO1G1PO!G}QPO1G1PO!HUQQO7+&pOOQO'#Fp'#FpO!H]QPO,5;nOOQO,5;n,5;nO!HdQPO'#GoO4oQPO'#FTO!HlQPO7+&wOOQO7+$R7+$RO!HqQPO,59`O!HxQPO'#GmO!IQQPO,5:wO(wQPO'#FlO!IVQPO,5=YOOQO1G.y1G.yOOQO7+%n7+%nO!I_QPO7+%nOOQO<<Ih<<IhOOQO7+%p7+%pOOQO1G/c1G/cOOQO,5<|,5<|OOQO,5<O,5<OOOQO-E9b-E9bO!IdQPO'#GeO!IlQPO,5:TOOQO<<Ho<<HoO!IqQQO<<HRO3PQPO<<HoO(wQPO<<HoOOQO<<HR<<HRO!KhQQO,5<POOQO-E9c-E9cO!KuQQO<<I`OOQO1G/m1G/mO!L]QQO1G/mO!LdQQO'#CgO!LwQQO'#CgO!M[QPO'#EOO!MgQPO'#CmOOQO'#Cm'#CmO!MuQPO'#F|O!M}QPO,59WO!NSQPO<<GqO!NZQPO<<GqOOQO<<Ix<<IxO!N`QPO<<IxOOQO<<JO<<JOO4oQPO7+&oO!NeQPO7+&oOKXQPO7+&kO!NsQPO7+&kO!NxQQO7+&kOOQO<<J[<<J[OOQO-E9n-E9nOOQO1G1Y1G1YOOQO,5;o,5;oO# PQQO,5;oOOQO<<Jc<<JcO# WQQO1G.zOOQO1G0d1G0dO# bQPO'#FkO# oQPO,5=XOOQO1G0c1G0cO# wQPO'#E^OOQO,5<W,5<WOOQO-E9j-E9jOOQO<<IY<<IYO# |QPO'#FgO#!ZQPO,5=POOQO1G/o1G/oOOQOAN>ZAN>ZO3PQPOAN>ZOOQO7+%X7+%XO#!cQPO,5:jOOQO,59X,59XO#!nQPO'#FnO##RQPO,5<hOOQO1G.r1G.rO##ZQPOAN=]OOQOAN=]AN=]O##ZQPOAN=]OOQOAN?dAN?dO##bQQO<<JZO4oQPO<<JZO##iQPO<<JVOOQO<<JV<<JVOKXQPO<<JVOOQO1G1Z1G1ZOOQO,5<V,5<VOOQO-E9i-E9iO!HqQPO,5:xOOQO,5<R,5<ROOQO-E9e-E9eOOQOG23uG23uOOQO,5<Y,5<YOOQO-E9l-E9lOOQOG22wG22wO##nQPOG22wOOQOAN?uAN?uO##uQQOAN?uOOQOAN?qAN?qO##|QPOAN?qOOQOLD(cLD(cOOQOG25aG25aOOQOG25]G25]O(wQPO'#CoO#$RQQO'#FuO#$fQQO'#CcOK`QPO'#D[",
  stateData: "#%R~OPOSQOS$gOS~OY}O]UO^VOjUOkUOlUOmUOoUOpeOsyOuZOvZO!RzO![hO!hkO!zjO!|kO!}kO#R{O#S{O#T{O#U{O#V{O#W{O#X{O#Y|O#[{O#]{O#^{O#_tO#a!OO#g!PO#j!QO#l!SO#o!RO#s!TO#u!UO#z!VO#|!WO$O!XO$Q!YO$hQO$jPO$rSO$yTO~OU!ZO~P]O$m![O^$iXewXe$iX}wX}$iX!^$iX!_$iX!a$iX!c$iX!d$iX!f$iX!g$iX!h$iX!i$iX!j$iX!k$iX!m$iX!w$iX!z$iX#_$iX$hwX$jwX$rwX$|$iX$}wX$}$iX%WwX%W$iX%Z$iX%`ZX~O!x#eX~P$cO$m![O^VXeVXe%SX}VX}%SX!^VX!_VX!aVX!cVX!dVX!fVX!gVX!hVX!iVX!jVX!kVX!mVX!wVX!zVX#_VX$h%SX$j%SX$r%SX$|VX$}VX$}%SX%WVX%W%SX%ZVX%`ZX~O!x#eX~P&mO$hRO$j!_O~O$x!dO$z!bO~O]UO^VOjUOkUOlUOmUOoUOpeOsyOuZOvZO!RzO!hkO!zjO!|kO!}kO#R{O#S{O#T{O#U{O#V{O#W{O#X{O#Y|O#[{O#]{O#^{O$rSO$yTO~O$h!fO$j!eO_%[P~P)XOe!rO}%RX$h%RX$j%RX$r%RX%W%RX_%RXp%RX%Z%RX%^%RX^%RX!S%RX$|%RX!a%RX!c%RX!d%RX!f%RX!g%RX!h%RX!i%RX!j%RX!k%RX!m%RX!w%RX!z%RX#_%RX!x%RX{%RXW%RX~O$}!sO~P+cO$}%RX~P+cO}!uO$h!tO$j!tO$rSO%W%PX~OuZOvZO#R{O#S{O#T{O#U{O#V{O#W{O#X{O#Y|O#[{O#]{O#^{O$h!}O$jWO$rSOubXvbX$hbX$jbX~O#obX~P.POe#RO}#SO%W#TO!a$uX!c$uX!d$uX!f$uX!g$uX!h$uX!i$uX!j$uX!k$uX!m$uX!w$uX!z$uX#_$uX$|$uX$}$uX%Z$uX_$uX!x$uX{$uX!S$uXW$uX~O!^#UO!_#UOe$vX}$vX!a$vX!c$vX!d$vX!f$vX!g$vX!h$vX!i$vX!j$vX!k$vX!m$vX!w$vX!z$vX#_$vX$|$vX$}$vX%W$vX%Z$vX_$vX!x$vX{$vX!S$vXW$vX~O^!WX~P1UO^#VO~O%W#TO~O!a#ZO!c#[O!d#]O!f#_O!g#`O!h#aO!i#bO!j#cO!k#cO!m#gO!w#dO!z#eO$|#XO$}#XO%Z#YO~O#_#fO~P3ZOW#hO~P]O%`#jO~O]UO^VOjUOkUOlUOmUOoUOpeOsyOuZOvZO!RzO!hkO!zjO!|kO!}kO$h*_O$j*^O$rSO$yTO~O$rSOu$aXv$aX#R$aX#S$aX#T$aX#U$aX#V$aX#W$aX#X$aX#Y$aX#[$aX#]$aX#^$aX#o$aX$h$aX$j$aX~O#R{O#S{O#T{O#U{O#V{O#W{O#X{O#Y|O#[{O#]{O#^{OubXvbX$hbX$jbX~O#obX~P7WO!x#pO~OuZOvZO#o#rO$h!}O$jWO~OuZOvZO$h!}O$jWO$}!sO~Oe#vO%W#TO~O#Z#wO~O$h!tO$j!tO~O#V#zO$hRO$j!_O~O^#{O~O^$OO~O#_$VO$h$UO$j$UO~O#_$XO$h$UO$j$UO~O#_$[O~P4oO]$_O$n$^O~O^$aOe$`Oucavca$hca$jca$rca~O#Rca#Sca#Tca#Uca#Vca#Wca#Xca#Yca#[ca#]ca#^ca#oca}ca_caWca!Sca~P:zO$x$dO$z!bO~O$m![O^$iX_$iXewXe$iX}wX}$iX!^$iX!_$iX!a$iX!c$iX!d$iX!f$iX!g$iX!h$iX!i$iX!j$iX!k$iX!m$iX!w$iX!z$iX$hwX$jwX$rwX$|$iX$}wX$}$iX%WwX%W$iX%Z$iX%`ZX~O_ZX_wXpwX!SZX%ZwX%^wX~P<qO$m![O^VX_VXeVXe%SX}VX}%SX!^VX!_VX!aVX!cVX!dVX!fVX!gVX!hVX!iVX!jVX!kVX!mVX!wVX!zVX$h%SX$j%SX$r%SX$|VX$}VX$}%SX%WVX%W%SX%ZVX%`ZX~O_ZX_%SXp%SX!SZX%Z%SX%^%SX~P?[O_$eO~P3ZO}!uO$rSO_%PX%W%PX%Z%PX~Op$jO$h$gO$j$fO%^$iO~PA|O_$oO%W#TO%Z$mO~OuZOvZO$h!}O$jWO~O!S$qO_%[X~O_$sO~OuZOvZO#R{O#S{O#T{O#U{O#V{O#W{O#X{O#Y|O#[{O#]{O#^{O$h!}O$jWO$rSO~O_%[P~PCgO!S$wO%`#jO_%_X~O_$yO~OuZOvZO$h!}O$jWO$r*]O%T$}O~O$|%OP~PESO$m![O}ZX!SZX$rZX_ZX~O!_ZX#_ZX^ZX!xZX~PEoO{%QO~O}%RO$rSO~O}!uO$rza_za%Zza!Sza$|za~O$hza$jza%Wzapza%^za~PFoO}!uO$rSO!S%]X!_%]X#_%]X_%]X!x%]X~O!_%UO!S!sX#_!sX_!sX~O!S%VO#_%dX~O#_%XO~O}!uO$rSO!S!Oa$|!Oa_!Oa%Z!Oa~O%W!Oa~PHlO#R{O#S{O#T{O#U{O#V{O#W{O#X{O#Y|O#[{O#]{O#^{O~Oubavba#oba$hba$jba~PIXOp%`O!R%_O$hRO$j!_O$}!sO~Os%^O~PJaOs%bO$hRO$j!_O$}!sO~O_%VP~P4oOuZOvZO$h!}O$jWO$rSO~OW%sO~P]O![hO~P4oO!S%PX$|%PX~PA|O!z#eO!a!{a!c!{a!d!{a!f!{a!g!{a!h!{a!i!{a!j!{a!k!{a!m!{a!w!{a#_!{a$|!{a$}!{a%Z!{a_!{a!x!{a{!{a!S!{aW!{a~O$rSOu$aav$aa#R$aa#S$aa#T$aa#U$aa#V$aa#W$aa#X$aa#Y$aa#[$aa#]$aa#^$aa#o$aa$h$aa$j$aa~O}!uO$h!tO$j!tO$rSO~O^#VO}%xO$rSO~O^&OO~Oe&PO#_&QO~O#o!RO$h*_O$j*^O#_%VP~P)XO!x&]O#_&[O~P3ZO![&^O~O#j&`O~O#_&aO~O#_&bO~O#_&cO~P3ZO$R&eO~P]O$n&fO~O![&jO_%bP~P4oOe$iX~PEoOeVX~PEoOe&pO~Op&qO}!uO$hRO$j!_O$rSO_!Oa%W!Oa%Z!Oa~O_&uO%Z$mO~O}!uO$h!tO$j!tO$rSO%^&xO~O!S$qO_%[a~O}!uO$h!tO$j!tO$rSO%^$iO~O_&{O~O$rSO~P7WO!S$wO_%_a~OuZOvZO$h!}O$jWO$r*]O~O%T'QO~P!%sO!Q'SO!R'SO!S!PX$|!PX~O!S'TO$|%OX~O$|'VO~O{'WO~O}!uO$rSO!S%]a!_%]a#_%]a_%]a!x%]a~O!['ZO~P4oO!S%VO#_%da~O^!WXeii}ii!^ii!_ii!aii!cii!dii!fii!gii!hii!iii!jii!kii!mii!wii!zii#_ii$|ii$}ii%Wii%Zii_ii!xii{ii!SiiWii~Oe'cO~O{'dO~P3ZOs'eO$hRO$j!_O~O#_hi_hi!xhi{hi!ShiWhi~P3ZO!S'fO_%VX#_%VX~P3ZO_'hO~O!h#aO!i#bO!m#gO!z#eO!a!`i!c!`i!d!`i!f!`i!g!`i!w!`i#_!`i$|!`i$}!`i%Z!`i_!`i!x!`i{!`i!S!`iW!`i~O!j#cO!k#cO~P!*}O!a#ZO!f#_O!g#`O!h#aO!i#bO!j#cO!k#cO!m#gO!z#eO$|#XO$}#XO%Z#YO!d!`i!w!`i#_!`i_!`i!x!`i{!`i!S!`iW!`i~O!c!`i~P!,fO!c#[O~P!,fO!a#ZO!h#aO!i#bO!j#cO!k#cO!m#gO!z#eO$|#XO$}#XO!c!`i!d!`i!f!`i!g!`i!w!`i#_!`i_!`i!x!`i{!`i!S!`iW!`i~O%Z!`i~P!.UO%Z#YO~P!.UO!h#aO!i#bO!m#gO!z#eO!c!`i!d!`i!g!`i!w!`i#_!`i_!`i!x!`i{!`i!S!`iW!`i~O!a#ZO!f#_O!j#cO!k#cO$|#XO$}#XO%Z#YO~P!/tO!m#gO!z#eO!a!`i!c!`i!d!`i!f!`i!g!`i!h!`i!j!`i!k!`i!w!`i#_!`i$|!`i$}!`i%Z!`i_!`i!x!`i{!`i!S!`iW!`i~O!i#bO~P!1]O!i!`i~P!1]O!j!`i!k!`i~P!*}O!x'iO~P3ZO}!uO$rSO!a%PX!c%PX!d%PX!f%PX!g%PX!h%PX!i%PX!j%PX!k%PX!m%PX!w%PX!z%PX#_%PX$|%PX$}%PX%Z%PX_%PX!x%PX{%PX!S%PXW%PX~O#_!ni_!ni!x!ni{!ni!S!niW!ni~P3ZO#_'lO~O{'mO~P4oO}'oO$rSO~O}%xO!['ZO$rSOe!Yi!a!Yi!c!Yi!d!Yi!f!Yi!g!Yi!h!Yi!i!Yi!j!Yi!k!Yi!m!Yi!w!Yi!z!Yi#_!Yi$|!Yi$}!Yi%W!Yi%Z!Yi_!Yi!x!Yi{!Yi!S!YiW!Yi~O^'sO_'tO~O#b'vO$hRO$j!_O~Oe'wO#_'xO~O#h'yOY#fi]#fi^#fij#fik#fil#fim#fio#fip#fis#fiu#fiv#fi!R#fi![#fi!h#fi!z#fi!|#fi!}#fi#R#fi#S#fi#T#fi#U#fi#V#fi#W#fi#X#fi#Y#fi#[#fi#]#fi#^#fi#_#fi#a#fi#g#fi#j#fi#l#fi#o#fi#s#fi#u#fi#z#fi#|#fi$O#fi$Q#fi$e#fi$h#fi$j#fi$r#fi$y#fiW#fi$R#fi#x#fi~O#_'}O~P4oO#_(OO~OY}O]UO^VOjUOkUOlUOmUOoUOpeOsyOuZOvZO!RzO![hO!hkO!zjO!|kO!}kO#R{O#S{O#T{O#U{O#V{O#W{O#X{O#Y(TO#[{O#]{O#^{O#_tO#a!OO#g!PO#j!QO#l!SO#o!RO#s!TO#u!UO#x(UO#z!VO#|!WO$O!XO$Q!YO$hQO$jPO$rSO$yTO~OW(SO~P!;nO$R(WO~P]O!^#UO!_(XO^!WX_$vXe$vX}$vX!a$vX!c$vX!d$vX!f$vX!g$vX!h$vX!i$vX!j$vX!k$vX!m$vX!w$vX!z$vX$|$vX$}$vX%W$vX%Z$vX~O_$tXW$tX!S$tX~P3ZO![&jOW%aP~P4oO_$tXu$TXv$TX$h$TX$j$TX$r$TXW$tX!S$tX~O!S([O_%bX~O_(^O~Op(_O~Oe(`O~O%Tca~P:zO!Q'SO!R'SO!S!Pa$|!Pa~O!S'TO$|%Oa~O!S%YX#_%YXW%YX_%YX~P3ZO!['ZOW%XP~P4oOp(mO$hRO$j!_O$}!sO~O!S'fO_%Va#_%Va~O!aza!cza!dza!fza!gza!hza!iza!jza!kza!mza!wza!zza#_za$}za!xza{zaWza~PFoO!a!Oa!c!Oa!d!Oa!f!Oa!g!Oa!h!Oa!i!Oa!j!Oa!k!Oa!m!Oa!w!Oa!z!Oa#_!Oa$}!Oa!x!Oa{!OaW!Oa~PHlO{(qO~P3ZO{(qO~P4oOuZOvZO$h(sO$j(tO$rSO_$pP~PIXO![(zO~O_({O~O#_(|O~O#b(}O$hRO$j!_O~O!_%UO!x)PO!S!sX#_!sX~O#_)RO~P3ZO#_)RO~P4oO#_)UO~P3ZOW)WO~P!;nO!x)XO#Z#wO~O#_)ZO~O![&jO~P4oO!S)^OW%aX~OW)`O~O!S([O_%ba~Op)dO~O!S)eOW%XX~OW)gO~O^!WXeiy}iy!^iy!_iy!aiy!ciy!diy!fiy!giy!hiy!iiy!jiy!kiy!miy!wiy!ziy#_iy$|iy$}iy%Wiy%Ziy_iy!xiy{iy!SiyWiy~O_$Xa!S$Xa#_$Xa~P3ZO#_!vy_!vy!x!vy{!vy!S!vyW!vy~P3ZO{)jO~P3ZOe%SX}%SX$r%SX$}%SX%^%SX~PEoOewX}wX$rwX$}wX%^wX~PEoO}!uO$rSO%^$iO~OuZOvZO$h(sO$j(tO~O!S)mO_$pX~O_)oO~OW)qO~P]O![)rO~O#_)sO~O!_%UO!x)uO!S!sX#_!sX~O_)wO~O#_)xO~P3ZO!x)yO~P3ZO_$tX!S$tX~P3ZO![&jOW$_X!S$_X~P4oO!S)^OW%aa~O!_)|O~O!['ZOW$ZX!S$ZX~P4oO!S)eOW%Xa~O}!uO$rSO%^&xO~OuZOvZO$h(sO$j(tO$rSO~PIXO!S)mO_$pa~OW*SO~P]O_*UO~P3ZO_*WO~OW*YO~P]O_*ZO~P3ZO_*[O~O!x$iX_$iX{$iX!S$iXW$iX~P$cO!xVX_VX{VX!SVXWVX~P&mOjQ]P!i$ym~",
  goto: "!6f%ePPPP%f%iP%lP'{P(b*`PPP*m*p*v+i-uP+i-{.P/dPPPP0wPP2[3{P5`PP5q7q9k;eP=[P=p?YPPP?`/d3{?v3{3{AhPAlPP.PPAtPPBcPPPPPP.PP.PCPDdDgDnD{CPE^.PPP.PP.PPP.PEvE}PPPPPPPPPPPPP'{PPFTFTFjFTPPFTPFTPGVGYPFTGrFTPFTPGuGxPFTPFTPFTPFTPPG|HdKUK[KvK|LSLYL`LfLlLrLxMOMtMzNQPPPPNWP! }FTPP!!t!#R!#UP!%d!%p!%}!(x3{PPP!*]PP!+s!+v!-l!/}!1}P!3y!4PP!4`!4cP!4l!4rP!5aP!5d!5g!5j!6[RxORwO#pbOVhjkv!T!V!Y#S#U#V#Z#[#]#^#_#`#a#b#c#d#i#j#p#{#|#}$O$P$Q$]$o%U%x&W&]&^&d&j&u'Z'f'i'o'y'}(O(R(U(X(z)P)R)^)e)p)r)u)x)|*TW!aS!O#z*]Q$]!ZQ$k!hS%Z#R#vQ%b#TU&g$`&P'wQ&h$aQ&r$lS'`%](lQ'e%cQ(j'cR)a([wqOhv!V#i#p#|#}$P$Q$]&^&d'y(R(z)p)r*T#piOhjkv!T!V!Y#S#U#V#Z#[#]#^#_#`#a#b#c#d#i#j#p#{#|#}$O$P$Q$]$a$o%U%x&W&]&^&d&j&u'Z'f'i'o'y'}(O(R(U(X(z)P)R)^)e)p)r)u)x)|*TQ!oVn!y[!R!h#q#r$i$p$t%V&U&x's'{(v)mQ#x}R&|$wg!^PQ!e!f!t$f$g(s(t*^*_R'u&OQ(x'sR*Q)mvsOhv!V#i#p#|#}$P$Q$]&^&d'y(R(z)p)r*TU!kV!n$qQ&V$OT(v's)m%emOV[^hjkov!T!V!Y!h!i!n!r!s!v!y#O#S#U#V#Z#[#]#^#_#`#a#b#c#d#g#i#j#k#l#n#p#q#t#{#|#}$O$P$Q$]$a$l$m$o$p$q$t$v${$|%T%U%q%x%y%{&U&W&]&^&d&j&u'S'T'Z'f'i'k'o's'y'{'}(O(R(U(X(u(z)P)R)^)e)k)m)p)r)u)x)|*T*`X!aS!O#z*]T$b!`'P#slOVhjkv!T!V!Y#S#U#V#Z#[#]#^#_#`#a#b#c#d#i#j#p#{#|#}$O$P$Q$]$a$o%U%x&W&]&^&d&j&u'Z'f'i'o'y'}(O(R(U(X(z)P)R)^)e)p)r)u)x)|*T#sfOVhjkv!T!V!Y#S#U#V#Z#[#]#^#_#`#a#b#c#d#i#j#p#{#|#}$O$P$Q$]$a$o%U%x&W&]&^&d&j&u'Z'f'i'o'y'}(O(R(U(X(z)P)R)^)e)p)r)u)x)|*T#sUOVhjkv!T!V!Y#S#U#V#Z#[#]#^#_#`#a#b#c#d#i#j#p#{#|#}$O$P$Q$]$a$o%U%x&W&]&^&d&j&u'Z'f'i'o'y'}(O(R(U(X(z)P)R)^)e)p)r)u)x)|*T#reOVhjkv!T!V!Y#S#U#V#Z#[#]#^#_#`#a#b#c#d#i#j#p#{#|#}$O$P$Q$]$a$o%U%x&W&]&^&d&j&u'Z'f'i'o'y'}(O(R(U(X(z)P)R)^)e)p)r)u)x)|*TQ#|!PQ#}!QQ$S!UR(V&`#seOVhjkv!T!V!Y#S#U#V#Z#[#]#^#_#`#a#b#c#d#i#j#p#{#|#}$O$P$Q$]$a$o%U%x&W&]&^&d&j&u'Z'f'i'o'y'}(O(R(U(X(z)P)R)^)e)p)r)u)x)|*TQ!qXS#uy%^S%]#R#vQ%c#TR(l'c$nXOV^hjksvy!T!V!Y!i!k!n!s#S#U#V#Z#[#]#^#_#`#a#b#c#d#g#i#j#l#p#u#{#|#}$O$P$Q$]$a$m$o$q$|%U%^%x&V&W&]&^&d&j&u'S'T'Z'f'i'o's'y'}(O(R(U(X(v(z)P)R)^)e)m)p)r)u)x)|*T*`Q$z!rR'O${$oXOV^hjksvy!T!V!Y!i!k!n!s#S#U#V#Z#[#]#^#_#`#a#b#c#d#g#i#j#l#p#u#{#|#}$O$P$Q$]$a$m$o$q$|%U%^%x&V&W&]&^&d&j&u'S'T'Z'f'i'o's'y'}(O(R(U(X(v(z)P)R)^)e)m)p)r)u)x)|*T*`$oYOV^hjksvy!T!V!Y!i!k!n!s#S#U#V#Z#[#]#^#_#`#a#b#c#d#g#i#j#l#p#u#{#|#}$O$P$Q$]$a$m$o$q$|%U%^%x&V&W&]&^&d&j&u'S'T'Z'f'i'o's'y'}(O(R(U(X(v(z)P)R)^)e)m)p)r)u)x)|*T*`$i]OV^hjksv!T!V!Y!i!k!n!s#S#U#V#Z#[#]#^#_#`#a#b#c#d#g#i#j#l#p#{#|#}$O$P$Q$]$a$m$o$q$|%U%x&V&W&]&^&d&j&u'S'T'Z'f'i'o's'y'}(O(R(U(X(v(z)P)R)^)e)m)p)r)u)x)|*T*`u!w[!h!x!y#O#k#q$l$p$t%T%q&U'j'k'{(u)k#}_OVhjkv!T!V!Y!s#S#U#V#Z#[#]#^#_#`#a#b#c#d#g#i#j#p#{#|#}$O$P$Q$]$a$m$o%U%x&W&]&^&d&j&u'S'T'Z'f'i'o'y'}(O(R(U(X(z)P)R)^)e)p)r)u)x)|*TQ%O!sR(e'TQ#WcS%|#t'bQ'_%[Q'r%}Q(i'aQ)h(kR*P)i#rcOVhjkv!T!V!Y#S#U#V#Z#[#]#^#_#`#a#b#c#d#i#j#p#{#|#}$O$P$Q$]$a$o%U%x&W&]&^&d&j&u'Z'f'i'o'y'}(O(R(U(X(z)P)R)^)e)p)r)u)x)|*TS%[#R#vQ'a%]Q(k'cR)i(lT%z#t%{U'Y%U'Z)eR'q%{!X#Zg!g$R$Z%a%d%e%h%i%j%k%l%p%t&i'X'n'|(P(n(p(r)T)Y)[)t*V!V#^g!g$R$Z%a%d%e%h%i%k%l%p%t&i'X'n'|(P(n(p(r)T)Y)[)t*V#siOVhjkv!T!V!Y#S#U#V#Z#[#]#^#_#`#a#b#c#d#i#j#p#{#|#}$O$P$Q$]$a$o%U%x&W&]&^&d&j&u'Z'f'i'o'y'}(O(R(U(X(z)P)R)^)e)p)r)u)x)|*TR!nVS!lV!nR&y$qS!lV!nQ&y$qQ(x'sR*Q)m[!{[!R#q#r&U'{Q&o$iQ']%VR(b&xvtOhv!V#i#p#|#}$P$Q$]&^&d'y(R(z)p)r*TR%u#jZ&k$a&j(X)^)|Q&m$aR)b([wtOhv!V#i#p#|#}$P$Q$]&^&d'y(R(z)p)r*TvrOhv!V#i#p#|#}$P$Q$]&^&d'y(R(z)p)r*TQ$W!WR$Y!XR$P!SvtOhv!V#i#p#|#}$P$Q$]&^&d'y(R(z)p)r*TR&W$OR$Q!SR&_$ST(Q&^(RQvOQ#ihY#sv#i&d)p*TQ&d$]Q)p(zR*T)rx^Ohv!V#i#p#|#}$O$P$Q$]&^&d'y(R(z)p)r*TQ!iVp!v[!h!y#O#k#q$l$p$t%T%q&U'k'{(u)kd#P^!i!v#l#n$v${$|%y*`!z#ljk!T!Y#S#U#V#Z#[#]#^#_#`#a#b#c#d#j#{$a$m$o%U%x&W&]&j&u'S'Z'f'i'o'}(O(U(X)P)R)^)e)u)x)|Q#noW$v!n$q's)mQ${!rS$|!s'TS%y#t%{R*`#gQ!cTR$c!ch!x[!h#O#k#q$l$p$t&U'{(u)kU%S!x%T'jQ%T!yT'j%q'kQ'U%OR(f'UQ'g%eR(o'gQ%{#tR'p%{Q)f(gR*O)fQ$r!lR&z$rQ$x!oR&}$xQ$n!jR&t$nQ)_(YR){)_Q(]&mR)c(]!SpOVhv!V!n#i#p#|#}$O$P$Q$]$q&^&d's'y(R(z)m)p)r*TU#Q^!i$vT#op#QQ)n(xR*R)nQ%W!{R'^%WQ(R&^R)V(R$iROSVhjkv!O!T!V!Y!Z!h#R#S#T#U#V#Z#[#]#^#_#`#a#b#c#d#i#j#p#v#z#{#|#}$O$P$Q$]$`$a$l$o%U%]%c%x&P&W&]&^&d&j&u'Z'c'f'i'o'w'y'}(O(R(U(X([(l(z)P)R)^)e)p)r)u)x)|*T*]duOhv#i$]&d(z)p)r*TQ$T!VQ%v#pQ&S#|Q&T#}Q&Y$PQ&Z$QS(Q&^(RR)O'yg!]PQ!e!f!t$f$g(s(t*^*_R(y's%YnOV[^hjkov!T!V!Y!h!i!n!r!s!v!y#O#S#U#V#Z#[#]#^#_#`#a#b#c#d#g#i#j#k#l#n#p#q#t#{#|#}$O$P$Q$]$l$m$o$p$q$t$v${$|%T%U%q%x%y%{&U&W&]&^&d&u'S'T'Z'f'i'k'o's'y'{'}(O(R(U(u(z)P)R)e)k)m)p)r)u)x*T*`Z&l$a&j(X)^)|Q!`SQ#y!OQ&R#zR'P*]Q&n$aQ(Y&jS)](X)|R)z)^vgOhv!V#i#p#|#}$P$Q$]&^&d'y(R(z)p)r*TS!gV#{Q#ejQ#mkQ$R!TQ$Z!YQ%a#SQ%d#UY%e#V$O'})R)xQ%g#ZQ%h#[Q%i#]Q%j#^Q%k#_Q%l#`Q%m#aQ%n#bQ%o#cQ%p#dQ%t#jW&i$a&j)^)|Q&v$oU'X%U'Z)eQ'n%xQ'|&WQ(P&]Q(a&uQ(n'fQ(p'iQ(r'oQ)T(OQ)Y(UQ)[(XQ)t)PR*V)u#saOVhjkv!T!V!Y#S#U#V#Z#[#]#^#_#`#a#b#c#d#i#j#p#{#|#}$O$P$Q$]$a$o%U%x&W&]&^&d&j&u'Z'f'i'o'y'}(O(R(U(X(z)P)R)^)e)p)r)u)x)|*T#r`OVhjkv!T!V!Y#S#U#V#Z#[#]#^#_#`#a#b#c#d#i#j#p#{#|#}$O$P$Q$]$a$o%U%x&W&]&^&d&j&u'Z'f'i'o'y'}(O(R(U(X(z)P)R)^)e)p)r)u)x)|*TR%Y#RR%P!s#pdOhjkv!T!V!Y#S#U#V#Z#[#]#^#_#`#a#b#c#d#i#j#p#{#|#}$O$P$Q$]$a$o%U%x&W&]&^&d&j&u'Z'f'i'o'y'}(O(R(U(X(z)P)R)^)e)p)r)u)x)|*TQ!jVQ%O!sQ%r#gQ&s$mQ(d'SR(e'Tv[Ohv!V#i#p#|#}$P$Q$]&^&d'y(R(z)p)r*TQ!hVU#O^#l$|#O#kjk!T!Y!s#S#U#V#Z#[#]#^#_#`#a#b#c#d#j#{$a$m$o%U%x&W&]&j&u'S'T'Z'f'i'o'}(O(U(X)P)R)^)e)u)x)|Q#qsQ$l!iQ$p!kS$t!n$qQ%q#gQ&U$OQ'k*`Q'{&VS(u's)mR)k(v$h]OV^hjksv!T!V!Y!i!k!n!s#S#U#V#Z#[#]#^#_#`#a#b#c#d#g#i#j#l#p#{#|#}$O$P$Q$]$a$m$o$q$|%U%x&V&W&]&^&d&j&u'S'T'Z'f'i'o's'y'}(O(R(U(X(v(z)P)R)^)e)m)p)r)u)x)|*T*`Q#tyQ%}#uR'b%^$sWOV^hjksvy!T!V!Y!i!k!n!r!s#S#U#V#Z#[#]#^#_#`#a#b#c#d#g#i#j#l#p#u#{#|#}$O$P$Q$]$a$m$o$q${$|%U%^%x&V&W&]&^&d&j&u'S'T'Z'f'i'o's'y'}(O(R(U(X(v(z)P)R)^)e)m)p)r)u)x)|*T*`Q'R$}R(c'QQ%f#VQ&X$OQ)S'}Q)v)RR*X)xR(h'ZQ'[%UQ(g'ZR)})eQ!mVR$u!n^!z[!R#q#r$i%V&xS$h!h$tQ&w$pQ'z&US(w's)mQ)Q'{R)l(vR!pVR(Z&jR&n$a!_oOV^hpv!V!i!n#Q#i#p#|#}$O$P$Q$]$q$v&^&d's'y(R(z)m)p)r*TU!|[!R&UV%w#q#r'{",
  nodeNames: "⚠ LineComment BlockComment Program DefineProgram IndexDefineBlock @DEFINE_BEGIN Identifier } FunctionDeclaration def Definition AssignValuer IntegerLiteral ( ) FunctionParameters FunctionParameter Modifiers MarkerAnnotation ScopedIdentifier . Annotation AnnotationArgumentList AssignmentExpression FieldAccess FloatingPointLiteral BooleanLiteral CharacterLiteral StringLiteral TextBlock null this ParenthesizedExpression ObjectCreationExpression new TypeArguments void PrimitiveType TypeName ScopedTypeName GenericType ArrayType ] Dimension [ AnnotatedType Wildcard extends super , ArgumentList ArrayAccess MethodInvocation MethodName MethodReference ArrayCreationExpression Dimension { ArrayInitializer AssignOp AssignOp BinaryExpression CompareOp CompareOp LogicOp LogicOp BitOp BitOp BitOp ArithOp ArithOp ArithOp BitOp InstanceofExpression instanceof LambdaExpression FormalParameters ReceiverParameter FormalParameter SpreadParameter VariableDeclarator InferredParameters Block TernaryExpression LogicOp : UpdateExpression UpdateOp UnaryExpression LogicOp BitOp CastExpression ElementValueArrayInitializer ElementValuePair public protected private abstract static final strictfp default synchronized native transient volatile ; ImportDeclaration import Asterisk ExpressionStatement LabeledStatement Label IfStatement if else WhileStatement while ForStatement foreach ForSpec LocalVariableDeclaration var EnhancedForStatement ForSpec AssertStatement assert SwitchStatement switch SwitchBlock SwitchLabel case DoStatement do BreakStatement break ContinueStatement continue ReturnStatement return @END",
  maxTerm: 204,
  nodeProps: [
    ["isolate", -4,1,2,28,29,""],
    ["group", -24,7,13,24,25,26,27,28,29,30,31,32,33,34,52,53,55,56,62,74,76,84,87,89,92,"Expression",-17,9,83,107,108,111,112,114,117,119,122,124,126,128,133,135,137,139,"Statement",-7,37,38,39,40,41,42,46,"Type"],
    ["openedBy", 8,"{",15,"("],
    ["closedBy", 14,")",58,"}"]
  ],
  propSources: [mvelHighlighting],
  skippedNodes: [0,1,2],
  repeatNodeCount: 17,
  tokenData: "!Mi_R!bOX%ZXY'oYZ)kZ^'o^p%Zpq'oqr+Vrs,gst%Ztu4nuv5zvw7[wx8rxyAZyzAwz{Be{|CZ|}Dq}!OE_!O!PFx!P!Q! r!Q!R!,h!R![!0`![!]!>p!]!^!@Q!^!_!@n!_!`!BX!`!a!B{!a!b!Di!b!c!EX!c!}!Eu!}#O!GR#O#P%Z#P#Q!Go#Q#R!H]#R#S4n#S#T%Z#T#o4n#o#p!IP#p#q!Im#q#r!KT#r#s!Kq#s#y%Z#y#z'o#z$f%Z$f$g'o$g#BY%Z#BY#BZ'o#BZ$IS%Z$IS$I_'o$I_$I|%Z$I|$JO'o$JO$JT%Z$JT$JU'o$JU$KV%Z$KV$KW'o$KW&FU%Z&FU&FV'o&FV;'S%Z;'S;=`&|<%l?H^%Z?H^?H_!L_?H_?H`!L{?H`O%ZS%`V$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZS%zO$zSS%}VOY&dYZ%uZr&drs'Ss;'S&d;'S;=`'i<%lO&dS&gVOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZS'PP;=`<%l%ZS'VUOY&dYZ%uZr&ds;'S&d;'S;=`'i<%lO&dS'lP;=`<%l&d_'vk$zS$gZOX%ZXY'oYZ)kZ^'o^p%Zpq'oqr%Zrs%zs#y%Z#y#z'o#z$f%Z$f$g'o$g#BY%Z#BY#BZ'o#BZ$IS%Z$IS$I_'o$I_$I|%Z$I|$JO'o$JO$JT%Z$JT$JU'o$JU$KV%Z$KV$KW'o$KW&FU%Z&FU&FV'o&FV;'S%Z;'S;=`&|<%lO%Z_)rY$zS$gZX^*bpq*b#y#z*b$f$g*b#BY#BZ*b$IS$I_*b$I|$JO*b$JT$JU*b$KV$KW*b&FU&FV*bZ*gY$gZX^*bpq*b#y#z*b$f$g*b#BY#BZ*b$IS$I_*b$I|$JO*b$JT$JU*b$KV$KW*b&FU&FV*bV+^X!|P$zSOY%ZYZ%uZr%Zrs%zs!_%Z!_!`+y!`;'S%Z;'S;=`&|<%lO%ZU,QV!aQ$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZT,jXOY-VYZ%uZr-Vrs3cs#O-V#O#P2m#P;'S-V;'S;=`3]<%lO-VT-YXOY-uYZ%uZr-urs.gs#O-u#O#P/R#P;'S-u;'S;=`3V<%lO-uT-zX$zSOY-uYZ%uZr-urs.gs#O-u#O#P/R#P;'S-u;'S;=`3V<%lO-uT.lVmPOY&dYZ%uZr&drs'Ss;'S&d;'S;=`'i<%lO&dT/WV$zSOY-uYZ/mZr-urs1fs;'S-u;'S;=`3V<%lO-uT/rW$zSOY0[Zr0[rs0ws#O0[#O#P0|#P;'S0[;'S;=`1`<%lO0[P0_WOY0[Zr0[rs0ws#O0[#O#P0|#P;'S0[;'S;=`1`<%lO0[P0|OmPP1PTOY0[YZ0[Z;'S0[;'S;=`1`<%lO0[P1cP;=`<%l0[T1iXOY-VYZ%uZr-Vrs2Us#O-V#O#P2m#P;'S-V;'S;=`3]<%lO-VT2ZUmPOY&dYZ%uZr&ds;'S&d;'S;=`'i<%lO&dT2pVOY-uYZ/mZr-urs1fs;'S-u;'S;=`3V<%lO-uT3YP;=`<%l-uT3`P;=`<%l-VT3hVmPOY&dYZ%uZr&drs3}s;'S&d;'S;=`'i<%lO&dT4SR$xSXY4]YZ4ipq4]P4`RXY4]YZ4ipq4]P4nO$yP_4ua$hZ$zSOY%ZYZ%uZr%Zrs%zst%Ztu4nu!Q%Z!Q![4n![!c%Z!c!}4n!}#R%Z#R#S4n#S#T%Z#T#o4n#o;'S%Z;'S;=`&|<%lO%ZU6RX!jQ$zSOY%ZYZ%uZr%Zrs%zs!_%Z!_!`6n!`;'S%Z;'S;=`&|<%lO%ZU6uV!^Q$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZV7cZ%ZR$zSOY%ZYZ%uZr%Zrs%zsv%Zvw8Uw!_%Z!_!`6n!`;'S%Z;'S;=`&|<%lO%ZU8]V!cQ$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZT8wZ$zSOY9jYZ%uZr9jrs:xsw9jwx%Zx#O9j#O#P<S#P;'S9j;'S;=`AT<%lO9jT9oX$zSOY%ZYZ%uZr%Zrs%zsw%Zwx:[x;'S%Z;'S;=`&|<%lO%ZT:cVlP$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZT:{XOY&dYZ%uZr&drs'Ssw&dwx;hx;'S&d;'S;=`'i<%lO&dT;mVlPOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZT<XZ$zSOY<zYZ%uZr<zrs=rsw<zwx9jx#O<z#O#P9j#P;'S<z;'S;=`?^<%lO<zT=PZ$zSOY<zYZ%uZr<zrs=rsw<zwx:[x#O<z#O#P%Z#P;'S<z;'S;=`?^<%lO<zT=uZOY>hYZ%uZr>hrs?dsw>hwx;hx#O>h#O#P&d#P;'S>h;'S;=`@}<%lO>hT>kZOY<zYZ%uZr<zrs=rsw<zwx:[x#O<z#O#P%Z#P;'S<z;'S;=`?^<%lO<zT?aP;=`<%l<zT?gZOY>hYZ%uZr>hrs@Ysw>hwx;hx#O>h#O#P&d#P;'S>h;'S;=`@}<%lO>hP@]VOY@YZw@Ywx@rx#O@Y#P;'S@Y;'S;=`@w<%lO@YP@wOlPP@zP;=`<%l@YTAQP;=`<%l>hTAWP;=`<%l9j_AbV^Z$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZVBOV_R$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZVBnX#bP$zS!iQOY%ZYZ%uZr%Zrs%zs!_%Z!_!`6n!`;'S%Z;'S;=`&|<%lO%ZVCbZ!hR$zSOY%ZYZ%uZr%Zrs%zs{%Z{|DT|!_%Z!_!`6n!`;'S%Z;'S;=`&|<%lO%ZVD[V!zR$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZVDxV!SR$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZVEf[!hR$zSOY%ZYZ%uZr%Zrs%zs}%Z}!ODT!O!_%Z!_!`6n!`!aF[!a;'S%Z;'S;=`&|<%lO%ZVFcV%`R$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%Z_GPZeY$zSOY%ZYZ%uZr%Zrs%zs!O%Z!O!PGr!P!Q%Z!Q![IQ![;'S%Z;'S;=`&|<%lO%ZVGwX$zSOY%ZYZ%uZr%Zrs%zs!O%Z!O!PHd!P;'S%Z;'S;=`&|<%lO%ZVHkV%^R$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZTIXc$zSjPOY%ZYZ%uZr%Zrs%zs!Q%Z!Q![IQ![!f%Z!f!gJd!g!hKQ!h!iJd!i#R%Z#R#SNz#S#W%Z#W#XJd#X#YKQ#Y#ZJd#Z;'S%Z;'S;=`&|<%lO%ZTJkV$zSjPOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZTKV]$zSOY%ZYZ%uZr%Zrs%zs{%Z{|LO|}%Z}!OLO!O!Q%Z!Q![Lp![;'S%Z;'S;=`&|<%lO%ZTLTX$zSOY%ZYZ%uZr%Zrs%zs!Q%Z!Q![Lp![;'S%Z;'S;=`&|<%lO%ZTLwc$zSjPOY%ZYZ%uZr%Zrs%zs!Q%Z!Q![Lp![!f%Z!f!gJd!g!h%Z!h!iJd!i#R%Z#R#SNS#S#W%Z#W#XJd#X#Y%Z#Y#ZJd#Z;'S%Z;'S;=`&|<%lO%ZTNXZ$zSOY%ZYZ%uZr%Zrs%zs!Q%Z!Q![Lp![#R%Z#R#SNS#S;'S%Z;'S;=`&|<%lO%ZT! PZ$zSOY%ZYZ%uZr%Zrs%zs!Q%Z!Q![IQ![#R%Z#R#SNz#S;'S%Z;'S;=`&|<%lO%Z_! y]$zS!iQOY%ZYZ%uZr%Zrs%zsz%Zz{!!r{!P%Z!P!Q!)e!Q!_%Z!_!`6n!`;'S%Z;'S;=`&|<%lO%Z_!!wX$zSOY!!rYZ!#dZr!!rrs!%Psz!!rz{!&_{;'S!!r;'S;=`!'s<%lO!!r_!#iT$zSOz!#xz{!$[{;'S!#x;'S;=`!$y<%lO!#xZ!#{TOz!#xz{!$[{;'S!#x;'S;=`!$y<%lO!#xZ!$_VOz!#xz{!$[{!P!#x!P!Q!$t!Q;'S!#x;'S;=`!$y<%lO!#xZ!$yOQZZ!$|P;=`<%l!#x_!%SXOY!%oYZ!#dZr!%ors!'ysz!%oz{!(i{;'S!%o;'S;=`!)_<%lO!%o_!%rXOY!!rYZ!#dZr!!rrs!%Psz!!rz{!&_{;'S!!r;'S;=`!'s<%lO!!r_!&dZ$zSOY!!rYZ!#dZr!!rrs!%Psz!!rz{!&_{!P!!r!P!Q!'V!Q;'S!!r;'S;=`!'s<%lO!!r_!'^V$zSQZOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%Z_!'vP;=`<%l!!r_!'|XOY!%oYZ!#dZr!%ors!#xsz!%oz{!(i{;'S!%o;'S;=`!)_<%lO!%o_!(lZOY!!rYZ!#dZr!!rrs!%Psz!!rz{!&_{!P!!r!P!Q!'V!Q;'S!!r;'S;=`!'s<%lO!!r_!)bP;=`<%l!%o_!)lV$zSPZOY!)eYZ%uZr!)ers!*Rs;'S!)e;'S;=`!+X<%lO!)e_!*WVPZOY!*mYZ%uZr!*mrs!+_s;'S!*m;'S;=`!,b<%lO!*m_!*rVPZOY!)eYZ%uZr!)ers!*Rs;'S!)e;'S;=`!+X<%lO!)e_!+[P;=`<%l!)e_!+dVPZOY!*mYZ%uZr!*mrs!+ys;'S!*m;'S;=`!,b<%lO!*mZ!,OSPZOY!+yZ;'S!+y;'S;=`!,[<%lO!+yZ!,_P;=`<%l!+y_!,eP;=`<%l!*mT!,ou$zS]POY%ZYZ%uZr%Zrs%zs!O%Z!O!P!/S!P!Q%Z!Q![!0`![!d%Z!d!e!3j!e!f%Z!f!gJd!g!hKQ!h!iJd!i!n%Z!n!o!2U!o!q%Z!q!r!5h!r!z%Z!z!{!7`!{#R%Z#R#S!2r#S#U%Z#U#V!3j#V#W%Z#W#XJd#X#YKQ#Y#ZJd#Z#`%Z#`#a!2U#a#c%Z#c#d!5h#d#l%Z#l#m!7`#m;'S%Z;'S;=`&|<%lO%ZT!/Za$zSjPOY%ZYZ%uZr%Zrs%zs!Q%Z!Q![IQ![!f%Z!f!gJd!g!hKQ!h!iJd!i#W%Z#W#XJd#X#YKQ#Y#ZJd#Z;'S%Z;'S;=`&|<%lO%ZT!0gi$zS]POY%ZYZ%uZr%Zrs%zs!O%Z!O!P!/S!P!Q%Z!Q![!0`![!f%Z!f!gJd!g!hKQ!h!iJd!i!n%Z!n!o!2U!o#R%Z#R#S!2r#S#W%Z#W#XJd#X#YKQ#Y#ZJd#Z#`%Z#`#a!2U#a;'S%Z;'S;=`&|<%lO%ZT!2]V$zS]POY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZT!2wZ$zSOY%ZYZ%uZr%Zrs%zs!Q%Z!Q![!0`![#R%Z#R#S!2r#S;'S%Z;'S;=`&|<%lO%ZT!3oY$zSOY%ZYZ%uZr%Zrs%zs!Q%Z!Q!R!4_!R!S!4_!S;'S%Z;'S;=`&|<%lO%ZT!4f`$zS]POY%ZYZ%uZr%Zrs%zs!Q%Z!Q!R!4_!R!S!4_!S!n%Z!n!o!2U!o#R%Z#R#S!3j#S#`%Z#`#a!2U#a;'S%Z;'S;=`&|<%lO%ZT!5mX$zSOY%ZYZ%uZr%Zrs%zs!Q%Z!Q!Y!6Y!Y;'S%Z;'S;=`&|<%lO%ZT!6a_$zS]POY%ZYZ%uZr%Zrs%zs!Q%Z!Q!Y!6Y!Y!n%Z!n!o!2U!o#R%Z#R#S!5h#S#`%Z#`#a!2U#a;'S%Z;'S;=`&|<%lO%ZT!7e_$zSOY%ZYZ%uZr%Zrs%zs!O%Z!O!P!8d!P!Q%Z!Q![!:r![!c%Z!c!i!:r!i#T%Z#T#Z!:r#Z;'S%Z;'S;=`&|<%lO%ZT!8i]$zSOY%ZYZ%uZr%Zrs%zs!Q%Z!Q![!9b![!c%Z!c!i!9b!i#T%Z#T#Z!9b#Z;'S%Z;'S;=`&|<%lO%ZT!9gc$zSOY%ZYZ%uZr%Zrs%zs!Q%Z!Q![!9b![!c%Z!c!i!9b!i!r%Z!r!sKQ!s#R%Z#R#S!8d#S#T%Z#T#Z!9b#Z#d%Z#d#eKQ#e;'S%Z;'S;=`&|<%lO%ZT!:yi$zS]POY%ZYZ%uZr%Zrs%zs!O%Z!O!P!<h!P!Q%Z!Q![!:r![!c%Z!c!i!:r!i!n%Z!n!o!2U!o!r%Z!r!sKQ!s#R%Z#R#S!=r#S#T%Z#T#Z!:r#Z#`%Z#`#a!2U#a#d%Z#d#eKQ#e;'S%Z;'S;=`&|<%lO%ZT!<ma$zSOY%ZYZ%uZr%Zrs%zs!Q%Z!Q![!9b![!c%Z!c!i!9b!i!r%Z!r!sKQ!s#T%Z#T#Z!9b#Z#d%Z#d#eKQ#e;'S%Z;'S;=`&|<%lO%ZT!=w]$zSOY%ZYZ%uZr%Zrs%zs!Q%Z!Q![!:r![!c%Z!c!i!:r!i#T%Z#T#Z!:r#Z;'S%Z;'S;=`&|<%lO%ZV!>wX!xR$zSOY%ZYZ%uZr%Zrs%zs![%Z![!]!?d!];'S%Z;'S;=`&|<%lO%ZV!?kV%WR$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZV!@XV#_R$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZV!@uY$}R$zSOY%ZYZ%uZr%Zrs%zs!^%Z!^!_!Ae!_!`+y!`;'S%Z;'S;=`&|<%lO%ZU!AlX!kQ$zSOY%ZYZ%uZr%Zrs%zs!_%Z!_!`6n!`;'S%Z;'S;=`&|<%lO%ZV!B`X!_R$zSOY%ZYZ%uZr%Zrs%zs!_%Z!_!`+y!`;'S%Z;'S;=`&|<%lO%ZV!CSY$|R$zSOY%ZYZ%uZr%Zrs%zs!_%Z!_!`+y!`!a!Cr!a;'S%Z;'S;=`&|<%lO%ZU!CyY!kQ$zSOY%ZYZ%uZr%Zrs%zs!_%Z!_!`6n!`!a!Ae!a;'S%Z;'S;=`&|<%lO%Z_!DrV%TX!wQ$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%Z_!E`V$rZ$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%Z_!E|a$jZ$zSOY%ZYZ%uZr%Zrs%zst%Ztu!Euu!Q%Z!Q![!Eu![!c%Z!c!}!Eu!}#R%Z#R#S!Eu#S#T%Z#T#o!Eu#o;'S%Z;'S;=`&|<%lO%ZV!GYV}R$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZV!GvV{R$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZU!HdX!gQ$zSOY%ZYZ%uZr%Zrs%zs!_%Z!_!`6n!`;'S%Z;'S;=`&|<%lO%ZV!IWV![R$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZU!ItZ!fQ$zSOY%ZYZ%uZr%Zrs%zs!_%Z!_!`6n!`#p%Z#p#q!Jg#q;'S%Z;'S;=`&|<%lO%ZU!JnV!dQ$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZV!K[VWR$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZT!KxV!}P$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZV!LfV$mR$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%ZT!MSV$nP$zSOY%ZYZ%uZr%Zrs%zs;'S%Z;'S;=`&|<%lO%Z",
  tokenizers: [0, 1, 2, 3],
  topRules: {"Program":[0,3]},
  dynamicPrecedences: {"41":1,"163":-1,"169":-1,"188":-1},
  specialized: [{term: 162, get: (value) => spec_identifier[value] || -1}],
  tokenPrec: 4411
});

// @ts-ignore
const parser$1 = parser$2;
// 获取当前文档中的所有标识符（变量、方法等）
function getAllIdentifiers(tree, doc) {
    const identifiers = [];
    tree.cursor().iterate(node => {
        if (node.name === "Identifier") {
            const identifier = doc.sliceString(node.from, node.to);
            identifiers.push(identifier);
        }
    });
    return identifiers;
}
const kwCompletion = (name) => ({ label: name, type: "keyword" });
const keywords = "this @END @DEFINE_BEGIN foreach assert break case continue default delete extends false finally in instanceof let new return static super switch this throw true typeof var yield  byte short int long char float double boolean".split(" ").map(kwCompletion);
const snips = [
    autocomplete.snippetCompletion("def ${name}(${params}) {\n\t${}\n}", {
        label: "def",
        detail: "definition",
        type: "keyword"
    }),
    autocomplete.snippetCompletion("for (int ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}", {
        label: "for",
        detail: "loop",
        type: "keyword"
    }),
    autocomplete.snippetCompletion("for (${name}: ${collection}) {\n\t${}\n}", {
        label: "for",
        detail: "for ele loop",
        type: "keyword"
    }),
    autocomplete.snippetCompletion("do {\n\t${}\n} while (${})", {
        label: "do",
        detail: "loop",
        type: "keyword"
    }),
    autocomplete.snippetCompletion("while (${}) {\n\t${}\n}", {
        label: "while",
        detail: "loop",
        type: "keyword"
    }),
    autocomplete.snippetCompletion("if (${}) {\n\t${}\n}", {
        label: "if",
        detail: "block",
        type: "keyword"
    }),
    autocomplete.snippetCompletion("if (${}) {\n\t${}\n} else {\n\t${}\n}", {
        label: "if",
        detail: "/ else block",
        type: "keyword"
    }),
    autocomplete.snippetCompletion("@DEFINE_BEGIN ${name} \n\t${}\n@END", {
        label: "@DEFINE_BEGIN",
        detail: "@DEFINE_BEGIN block",
        type: "keyword"
    }),
];
// 创建自动补全源
function mvelCompletionSource(context) {
    const word = context.matchBefore(/[\w|@]*/);
    if (!word || (word.from === word.to && !context.explicit))
        return null;
    // 获取当前文档中的所有标识符
    const tree = parser$1.parse(context.state.doc.toString());
    const identifiers = getAllIdentifiers(tree, context.state.doc);
    // 提供基础的关键词补全
    const completions = [
        ...(keywords.concat(snips)),
        ...identifiers.map(identifier => ({ label: identifier, type: "variable" }))
    ];
    return {
        from: word.from,
        options: completions.filter(completion => completion.label.startsWith(word.text)),
        validFor: /^(\w*)$/
    };
}

// @ts-ignore
const parser = parser$2;
/// A language provider based on the [Lezer Java
/// parser](https://github.com/lezer-parser/java), extended with
/// highlighting and indentation information.
const mvelLanguage = language.LRLanguage.define({
    name: "mvel",
    parser: parser.configure({
        props: [
            language.indentNodeProp.add({
                IfStatement: language.continuedIndent({ except: /^\s*({|else\b)/ }),
                LabeledStatement: language.flatIndent,
                SwitchBlock: context => {
                    let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
                    return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
                },
                Block: language.delimitedIndent({ closing: "}" }),
                IndexDefineBlock: language.delimitedIndent({ closing: "@END" }),
                ExpressionDefineBlock: language.delimitedIndent({ closing: "@END" }),
                BlockComment: () => null,
                Statement: language.continuedIndent({ except: /^{/ })
            }),
            language.foldNodeProp.add({
                ["Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody " +
                    "ConstructorBody InterfaceBody ArrayInitializer IndexDefineBlock ExpressionDefineBlock"]: language.foldInside,
                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
            })
        ]
    }),
    languageData: {
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        indentOnInput: /^\s*(?:case |default:|\{|\})$/
    }
});
// 定义自动补全插件
const mvelCompletionPlugin = mvelLanguage.data.of({
    autocomplete: mvelCompletionSource
});
/// Java language support.
function mvel() {
    // return new LanguageSupport(mvelLanguage, [mvelCompletionPlugin, mvelLintPlugin]);
    return new language.LanguageSupport(mvelLanguage, [mvelCompletionPlugin]);
}

exports.mvel = mvel;
exports.mvelLanguage = mvelLanguage;
